#!/usr/bin/env node

var path = require('path')
require('shelljs/global')
require('colors')

if (process.argv[2] !== 'publish') {
    process.stderr.write("publish is the only action available for now, sorry.\n".red)
    exit(1)
}

if (!which('git')) {
  echo('You must have git installed to run this.')
  exit(1)
}

if (test('-f', './package.json') === false) {
    process.stderr.write('This directory does not have a package.json file.\n'.red)
    exit(1)
}

var package = require(path.resolve('./package.json'))

if (!package.repository || package.repository.type !== 'git') {
    process.stderr.write("package.json does not list a git repository.".red)
    exit(1)
}

var statusOutput = exec('git status --porcelain', {silent: true})

if (statusOutput.code !== 0 || statusOutput.output != '') {
    process.stderr.write('The repo must be up to date with no uncommitted changes. git status failed with:\n'.red)
    process.stderr.write(statusOutput.output)
    exit(1)
}

var getRemotes = exec('git remote -v', {silent: true})
var remotes = getRemotes.output.split('\n')
var hasGitAsNPMRemote = remotes.some(function(remote){
    var parts = remote.split('\t')
    return parts[0] === 'git-as-npm'
})

if (hasGitAsNPMRemote) {
    process.stderr.write("git-as-npm origin is already specified. It shouldn't be.\n".red)
    exit(1)
}

var addRepo = exec('git remote add git-as-npm ' + package.repository.url)
if (addRepo.code !== 0) {
    stderr.write("Add remote failed:\n".red)
    stderr.write(addRepo.output)
}

var currentBranch = exec('git rev-parse --abbrev-ref HEAD', {silent: true}).output.trim()
if (currentBranch === 'release') {
    process.stderr.write('You are currently in the release branch. Please switch to the branch you want to deploy.\n'.red)
    exit(1)
}

var failed = function() {
    // Quick reset function to change back to original branch in case of issues
    exec('git remote remove git-as-npm', {silent: true})
    exec('git reset HEAD --hard', {silent: true})
    exec('git checkout ' + currentBranch, {silent: true})
    exit(1)
}


var branchExists = exec('git rev-parse --verify release', {silent: true})
if (branchExists.code === 128) {
    exec('git checkout -b release', {silent: true})
} else if (branchExists.code === 0) {
    exec('git checkout release', {silent: true})
    process.stdout.write('Pulling latest releases...\n')
    var pullResult = exec('git pull git-as-npm release', {silent: true})
    if (pullResult.code !== 0) {
        process.stderr.write('Pull failed:\n'.red)
        process.stderr.write(pullResult.output)
        failed()
    }
} else {
    process.stderr.write('Unrecognised result from switching branch:\n'.red)
    process.stderr.write(branchExists.output)
    failed()
}


var mergeOutput = exec('git merge ' + currentBranch, {silent: true})
if (mergeOutput.code !== 0) {
    process.stderr.write('Error merging ' + currentBranch + ' branch into release.\n'.red)
    process.stderr.write(mergeOutput.output)
    failed()
}

if (package.scripts.prepublish) {
    process.stdout.write('Running prepublish script...\n')
    var prepublish = exec('npm run prepublish')
    if (prepublish.code != 0) {
        process.stderr.write("Prepublish failed.\n".red)
        failed()
    }
    exec('git add -A')
    var commitResult = exec('git commit -a -m "git-as-npm prepublish run"')
    var statusOutput = exec('git status --porcelain', {silent: true})
    if (statusOutput.code !== 0 || statusOutput.output != '') {
        process.stderr.write("Commit of prepublished code failed:\n".red)
        process.stderr.write(commitResult.output)
        failed()
    }
}

var version = package.version
var createTag = exec('git tag -a ' + version + ' -m "Automatically generated by git-as-npm"', {silent: true})

if (createTag.code === 128) {
    process.stderr.write(("Release " + version + " already exists. Please bump the version number in package.json\n").red)
    failed()
} else if (createTag.code !== 0) {
    process.stderr.write("Tag creation failed:\n".red)
    process.stderr.write(createTag.output)
    failed()
}

var pushResult = exec('git push git-as-npm release --follow-tags', {silent: true})
if (pushResult.code !== 0) {
    process.stderr.write("Push failed:\n".red)
    process.stderr.write(pushResult.output)
    failed()
}

process.stdout.write(("Version " + version + " pushed to git.\n"))
exec('git remote remove git-as-npm', {silent: true})
exec('git checkout ' + currentBranch, {silent: true})
